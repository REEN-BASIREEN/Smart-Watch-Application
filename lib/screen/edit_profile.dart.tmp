import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';

class EditProfilePage extends StatefulWidget {
  final String name;
  final String email;
  final Timestamp? dob;
  final String gender;
  final num weight;
  final num height;

  EditProfilePage({
    required this.name,
    required this.email,
    required this.dob,
    required this.gender,
    required this.weight,
    required this.height,
  });

  @override
  _EditProfilePageState createState() => _EditProfilePageState();
}

class _EditProfilePageState extends State<EditProfilePage> {
  final _auth = FirebaseAuth.instance;
  final _firestore = FirebaseFirestore.instance;

  // Theme colors
  final Color backgroundColor = Color(0xFF15202B);
  final Color cardBackground = Color(0xFF192734);
  final Color textColor = Color(0xFFE1E8ED);
  final Color secondaryText = Color(0xFF8899A6);
  final Color accentColor = Color(0xFF1D9BF0);

  late TextEditingController _nameController;
  late TextEditingController _emailController;
  late TextEditingController _weightController;
  late TextEditingController _heightController;

  DateTime? _selectedDate;
  String? _selectedGender;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.name);
    _emailController = TextEditingController(text: widget.email);
    _weightController = TextEditingController(text: widget.weight.toString());
    _heightController = TextEditingController(text: widget.height.toString());
    _selectedGender = widget.gender;
    _selectedDate = widget.dob != null ? widget.dob!.toDate() : DateTime.now();
  }

  Future<void> _saveUserData() async {
    try {
      String userId = _auth.currentUser!.uid;
      await _firestore.collection('users').doc(userId).update({
        'name': _nameController.text,
        'email': _emailController.text,
        'dob': Timestamp.fromDate(_selectedDate!),
        'gender': _selectedGender ?? '',
        'weight': num.tryParse(_weightController.text) ?? 0,
        'height': num.tryParse(_heightController.text) ?? 0,
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Profile updated successfully', 
            style: TextStyle(color: textColor)
          ),
          backgroundColor: cardBackground,
        ),
      );
      Navigator.pop(context);
    } catch (e) {
      print('Error updating user data: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to update profile',
            style: TextStyle(color: textColor)
          ),
          backgroundColor: cardBackground,
        ),
      );
    }
  }

  void _pickDate() async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.dark(
              primary: accentColor,
              onPrimary: textColor,
              surface: cardBackground,
              onSurface: textColor,
            ),
          ),
          child: child!,
        );
      },
    );

    if (pickedDate != null) {
      setState(() {
        _selectedDate = pickedDate;
      });
    }
  }

  Widget _buildInputField({required String label, required Widget field}) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            label,
            style: TextStyle(
              color: textColor,
              fontWeight: FontWeight.w600,
              fontSize: 16,
            ),
          ),
          SizedBox(height: 6),
          field,
        ],
      ),
    );
  }

  InputDecoration _getInputDecoration() {
    return InputDecoration(
      filled: true,
      fillColor: cardBackground,
      border: OutlineInputBorder(
        borderSide: BorderSide(color: accentColor),
      ),
      enabledBorder: OutlineInputBorder(
        borderSide: BorderSide(color: secondaryText),
      ),
      focusedBorder: OutlineInputBorder(
        borderSide: BorderSide(color: accentColor),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: backgroundColor,
      appBar: AppBar(
        backgroundColor: cardBackground,
        elevation: 0,
        title: Text(
          'Edit Profile',
          style: TextStyle(
            color: textColor,
            fontWeight: FontWeight.bold,
          ),
        ),
        iconTheme: IconThemeData(color: accentColor),
      ),
      body: Container(
        color: backgroundColor,
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: SingleChildScrollView(
            child: Column(
              children: [
                _buildInputField(
                  label: 'Name',
                  field: TextField(
                    controller: _nameController,
                    style: TextStyle(color: textColor),
                    decoration: _getInputDecoration(),
                  ),
                ),
                _buildInputField(
                  label: 'Email',
                  field: TextField(
                    controller: _emailController,
                    enabled: false,
                    style: TextStyle(color: secondaryText),
                    decoration: _getInputDecoration(),
                  ),
                ),
                _buildInputField(
                  label: 'Date of Birth',
                  field: GestureDetector(
                    onTap: _pickDate,
                    child: Container(
                      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 14),
                      decoration: BoxDecoration(
                        border: Border.all(color: secondaryText),
                        borderRadius: BorderRadius.circular(4),
                        color: cardBackground,
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            _selectedDate != null
                                ? DateFormat('yyyy-MM-dd').format(_selectedDate!)
                                : 'Select Date',
                            style: TextStyle(
                              color: textColor,
                              fontSize: 16,
                            ),
                          ),
                          Icon(Icons.calendar_today,
                              size: 18, color: accentColor),
                        ],
                      ),
                    ),
                  ),
                ),
                _buildInputField(
                  label: 'Gender',
                  field: DropdownButtonFormField<String>(
                    value: _selectedGender,
                    dropdownColor: cardBackground,
                    style: TextStyle(color: textColor),
                    decoration: _getInputDecoration(),
                    items: ['Male', 'Female', 'Other']
                        .map((gender) => DropdownMenuItem(
                              value: gender,
                              child: Text(gender),
                            ))
                        .toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedGender = value;
                      });
                    },
                  ),
                ),
                _buildInputField(
                  label: 'Weight (kg)',
                  field: TextField(
                    controller: _weightController,
                    style: TextStyle(color: textColor),
                    keyboardType: TextInputType.number,
                    decoration: _getInputDecoration(),
                  ),
                ),
                _buildInputField(
                  label: 'Height (cm)',
                  field: TextField(
                    controller: _heightController,
                    style: TextStyle(color: textColor),
                    keyboardType: TextInputType.number,
                    decoration: _getInputDecoration(),
                  ),
                ),
                SizedBox(height: 24),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: accentColor,
                    shape: StadiumBorder(),
                  ),
                  onPressed: _saveUserData,
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: 40, vertical: 14),
                    child: Text(
                      'Save',
                      style: TextStyle(
                        fontSize: 16,
                        color: textColor,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
